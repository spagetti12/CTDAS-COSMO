import numpy as np
import sys
np.set_printoptions(threshold=sys.maxsize)


fullcov = np.zeros(shape=(90,90))

partcov = np.array([ \
(0.64, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3), \
(0.3, 0.64, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3), \
(0.3, 0.3, 0.64, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3), \
(0.3, 0.3, 0.3, 0.64, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3), \
(0.3, 0.3, 0.3, 0.3, 0.64, 0.3, 0.3, 0.3, 0.3, 0.3), \
(0.3, 0.3, 0.3, 0.3, 0.3, 0.64, 0.3, 0.3, 0.3, 0.3), \
(0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.64, 0.3, 0.3, 0.3), \
(0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.64, 0.3, 0.3), \
(0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.64, 0.3), \
(0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.64) ])

partcov_dg = np.array([ \
(0.64, 0., 0., 0., 0., 0., 0., 0., 0., 0.), \
(0., 0.64, 0., 0., 0., 0., 0., 0., 0., 0.), \
(0., 0., 0.64, 0., 0., 0., 0., 0., 0., 0.), \
(0., 0., 0., 0.64, 0., 0., 0., 0., 0., 0.), \
(0., 0., 0., 0., 0.64, 0., 0., 0., 0., 0.), \
(0., 0., 0., 0., 0., 0.64, 0., 0., 0., 0.), \
(0., 0., 0., 0., 0., 0., 0.64, 0., 0., 0.), \
(0., 0., 0., 0., 0., 0., 0., 0.64, 0., 0.), \
(0., 0., 0., 0., 0., 0., 0., 0., 0.64, 0.), \
(0., 0., 0., 0., 0., 0., 0., 0., 0., 0.64) ])


L_matrix = np.array([\
(1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000), \
(0.   , 1.   , 0.134, 0.075, 0.155, 0.054, 0.563, 0.106, 0.026), \
(0.   , 0.134, 1.   , 0.411, 0.179, 0.068, 0.112, 0.090, 0.036), \
(0.   , 0.075, 0.411, 1.   , 0.218, 0.114, 0.076, 0.090, 0.068), \
(0.   , 0.155, 0.179, 0.218, 1.   , 0.319, 0.216, 0.090, 0.154), \
(0.   , 0.054, 0.068, 0.114, 0.319, 1.   , 0.083, 0.024, 0.48 ), \
(0.   , 0.563, 0.112, 0.076, 0.216, 0.083, 1.   , 0.14 , 0.090), \
(0.   , 0.106, 0.090, 0.090, 0.090, 0.024, 0.14 , 1.   , 0.090), \
(0.   , 0.026, 0.036, 0.068, 0.154, 0.48 , 0.090, 0.090, 1.   ), ])


#L_matrix = np.identity(9)

zero_reg = ([3])
#zero_reg = ([3, 6])

for i in range(9):
    for j in range(9):
        if i in zero_reg or j in zero_reg:
            print('aaaaaaaaa',i,j)
            fullcov[i*10:(i+1)*10,j*10:(j+1)*10] = partcov_dg * L_matrix[i,j]
        else:
            fullcov[i*10:(i+1)*10,j*10:(j+1)*10] = partcov * L_matrix[i,j]

#        fullcov[i*10:(i+1)*10,j*10:(j+1)*10] = partcov * L_matrix[i,j]

C = np.linalg.cholesky(fullcov)
a = np.random.randn(90)

#print(np.round(fullcov,3))
#print(np.round(C,3))
print(np.dot(a,C))
